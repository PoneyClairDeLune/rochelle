"use strict";let b=["utf-8","utf-16","utf-16be"];ReadableStreamDefaultController.prototype.send=ReadableStreamDefaultController.prototype.send||function(s){this.unsent=!1,this.enqueue(s)};let m=class{static SPLIT_UTF_8=0;static SPLIT_UTF_16_LE=1;static SPLIT_UTF_16_BE=2;static lineRaw(s,u=0){if(u?.constructor!=Number||u<0||u>=b.length)throw new TypeError("Invalid split mode");if(u)throw new Error("UTF-16LE/BE currently not implemented");if(!s||s?.constructor!=ReadableStream)throw new TypeError("Not a readable stream");let c=s.getReader(),r,h=!1,e=[],t=0,a=0,g=0;return new ReadableStream({pull:async f=>{for(f.unsent=!0;f.unsent;){if(!r||t>=r.length){t>a&&(e.push(r.subarray(a)),a=0,console.error("Read a new chunk."));let{value:o,done:l}=await c.read();r=o,h=l,t=0}if(r){console.error(`Read byte at chunk pointer ${t}.`);let o=r[t],l=!1;switch(o){case 10:{g==13?a++:l=!0;break}case 13:{l=!0;break}}if(l){if(e.length){console.error("Building a multi-part buffer."),e.push(r.subarray(a,t));let d=0;for(let i=0;i<e.length;i++)d+=e[i].length;let n=new Uint8Array(d),w=0;for(let i=0;i<e.length;i++)n.set(e[i],w),w+=e[i].length;f.send(n),e=[],console.error("Multi-part buffer write finished.")}else f.send(r.subarray(a,t)),console.error("Single buffer write finished.");a=t+1}g=o}else console.error("No reading available.");if(h){if(console.error("Stream finished."),a!=t&&e.push(r.subarray(a,t)),e.length){console.error("Building a multi-part buffer.");let o=0;for(let n=0;n<e.length;n++)o+=e[n].length;let l=new Uint8Array(o),d=0;for(let n=0;n<e.length;n++)l.set(e[n],d),d+=e[n].length;f.send(l),console.error("Multi-part buffer write finished.")}f.unsent=!1,f.close()}t++}}},new ByteLengthQueuingStrategy({highWaterMark:256}))}static line(s,u=0,c){let r=this.feedRaw(s,u).getReader(),h=new TextDecoder(c||b[u]);return new ReadableStream({pull:async e=>{let{value:t,done:a}=await r.read();t&&e.enqueue(h.decode(t)),a&&e.close()}})}},y=m;export{y as default};
